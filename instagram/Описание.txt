Необходимо разработать сервис по типу Instagram.

Основные сущности:
1. Пользователь
2. Пост (картинка, текст)
3. Лайк (связывает пользователя и пост)
4. Комментарий (текст)

Основные операции:
1. Получение ленты (список постов)
2. Просмотр поста (картинка, текст, комментарии).
Нужно учесть, что не обязательно сразу загружать все комментарии, можно сделать пагинацию.
Логичнее вынести получение комментариев в отдельный запрос.
3. Создание поста.
4. Лайк поста.
5. Создание комментария.

Особенности:
1. В Instagram около 1 млрд пользователей
2. Можно считать, что запросов на чтение в 10 раз больше запросов на запись.
3. Получение актуальной информации в реальном времени (например, кол-во лайков) не так критично. Допустима согласованность в конечном счете.
4. Работа с большим кол-вом изображений. Можно загружать картинки с клиента на файловый сервис, который потом будет раздавать картинки через CDN, а на сервере сохранять только URL картинки.
5. Наличие персонализированной ленты для каждого пользователя, которая рассчитывается определенным алгоритмом.
6. Чем более свежий пост, тем чаще его будут запрашивать. Поэтому имеет смысл добавить шардирование данных по дате и/или хранить посты в порядке, обратном хронолическому.
Таким образом будет возможность добавлять нужное количество реплик в зависимости от "свежести" шарды.

Предлагаемое решение
Предлагается разделить схему хранения на 2 части - write data store и read data store. В write DS будем хранить основную копию данных,
в read DS - materialized view нашего write DS. Это позволит независимо масштабировать чтение и запись.
В read DS будем хранить materialized view для ленты постов. Отдельные посты также будем получать из этого view.
Список комментариев будем загружать прямо из write DS, т.к. никакой оптимизации для чтения делать не нужно.

Для write DS будем использовать реляционную модель, для read DS - документоориентированную.
Materialized view лент пользователей будем асинхронно обновлять при публикации нового поста / добавлении лайка.
